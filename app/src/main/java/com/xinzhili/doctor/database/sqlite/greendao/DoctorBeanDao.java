package com.xinzhili.doctor.database.sqlite.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xinzhili.doctor.bean.DepartmentBean;
import com.xinzhili.doctor.bean.InstitutionBean;
import com.xinzhili.doctor.bean.UserBean;
import com.xinzhili.doctor.database.sqlite.converent.ClinicalProjectsConverter;
import com.xinzhili.doctor.database.sqlite.converent.DepartmentBeanConverent;
import com.xinzhili.doctor.database.sqlite.converent.InstitutionBeanConverent;
import com.xinzhili.doctor.database.sqlite.converent.RelationShipBeanConverent;
import com.xinzhili.doctor.database.sqlite.converent.UserBeanConverent;
import java.util.List;

import com.xinzhili.doctor.database.sqlite.entity.DoctorBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOCTOR_BEAN".
*/
public class DoctorBeanDao extends AbstractDao<DoctorBean, Long> {

    public static final String TABLENAME = "DOCTOR_BEAN";

    /**
     * Properties of entity DoctorBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property ReviewOrgId = new Property(2, String.class, "reviewOrgId", false, "REVIEW_ORG_ID");
        public final static Property User = new Property(3, String.class, "user", false, "USER");
        public final static Property Institution = new Property(4, String.class, "institution", false, "INSTITUTION");
        public final static Property Department = new Property(5, String.class, "department", false, "DEPARTMENT");
        public final static Property Relationship = new Property(6, String.class, "relationship", false, "RELATIONSHIP");
        public final static Property ClinicalProjects = new Property(7, String.class, "clinicalProjects", false, "CLINICAL_PROJECTS");
    }

    private final UserBeanConverent userConverter = new UserBeanConverent();
    private final InstitutionBeanConverent institutionConverter = new InstitutionBeanConverent();
    private final DepartmentBeanConverent departmentConverter = new DepartmentBeanConverent();
    private final RelationShipBeanConverent relationshipConverter = new RelationShipBeanConverent();
    private final ClinicalProjectsConverter clinicalProjectsConverter = new ClinicalProjectsConverter();

    public DoctorBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DoctorBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCTOR_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"REVIEW_ORG_ID\" TEXT," + // 2: reviewOrgId
                "\"USER\" TEXT," + // 3: user
                "\"INSTITUTION\" TEXT," + // 4: institution
                "\"DEPARTMENT\" TEXT," + // 5: department
                "\"RELATIONSHIP\" TEXT," + // 6: relationship
                "\"CLINICAL_PROJECTS\" TEXT);"); // 7: clinicalProjects
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCTOR_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DoctorBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String reviewOrgId = entity.getReviewOrgId();
        if (reviewOrgId != null) {
            stmt.bindString(3, reviewOrgId);
        }
 
        UserBean user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, userConverter.convertToDatabaseValue(user));
        }
 
        InstitutionBean institution = entity.getInstitution();
        if (institution != null) {
            stmt.bindString(5, institutionConverter.convertToDatabaseValue(institution));
        }
 
        DepartmentBean department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(6, departmentConverter.convertToDatabaseValue(department));
        }
 
        List relationship = entity.getRelationship();
        if (relationship != null) {
            stmt.bindString(7, relationshipConverter.convertToDatabaseValue(relationship));
        }
 
        List clinicalProjects = entity.getClinicalProjects();
        if (clinicalProjects != null) {
            stmt.bindString(8, clinicalProjectsConverter.convertToDatabaseValue(clinicalProjects));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DoctorBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String reviewOrgId = entity.getReviewOrgId();
        if (reviewOrgId != null) {
            stmt.bindString(3, reviewOrgId);
        }
 
        UserBean user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, userConverter.convertToDatabaseValue(user));
        }
 
        InstitutionBean institution = entity.getInstitution();
        if (institution != null) {
            stmt.bindString(5, institutionConverter.convertToDatabaseValue(institution));
        }
 
        DepartmentBean department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(6, departmentConverter.convertToDatabaseValue(department));
        }
 
        List relationship = entity.getRelationship();
        if (relationship != null) {
            stmt.bindString(7, relationshipConverter.convertToDatabaseValue(relationship));
        }
 
        List clinicalProjects = entity.getClinicalProjects();
        if (clinicalProjects != null) {
            stmt.bindString(8, clinicalProjectsConverter.convertToDatabaseValue(clinicalProjects));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DoctorBean readEntity(Cursor cursor, int offset) {
        DoctorBean entity = new DoctorBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reviewOrgId
            cursor.isNull(offset + 3) ? null : userConverter.convertToEntityProperty(cursor.getString(offset + 3)), // user
            cursor.isNull(offset + 4) ? null : institutionConverter.convertToEntityProperty(cursor.getString(offset + 4)), // institution
            cursor.isNull(offset + 5) ? null : departmentConverter.convertToEntityProperty(cursor.getString(offset + 5)), // department
            cursor.isNull(offset + 6) ? null : relationshipConverter.convertToEntityProperty(cursor.getString(offset + 6)), // relationship
            cursor.isNull(offset + 7) ? null : clinicalProjectsConverter.convertToEntityProperty(cursor.getString(offset + 7)) // clinicalProjects
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DoctorBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReviewOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser(cursor.isNull(offset + 3) ? null : userConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setInstitution(cursor.isNull(offset + 4) ? null : institutionConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setDepartment(cursor.isNull(offset + 5) ? null : departmentConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setRelationship(cursor.isNull(offset + 6) ? null : relationshipConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setClinicalProjects(cursor.isNull(offset + 7) ? null : clinicalProjectsConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DoctorBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DoctorBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DoctorBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
